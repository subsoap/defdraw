local defdraw = require("defdraw.defdraw")

--[[

In the main.collection you can see that there is a behind graphic which has a z distance below the surface.

When a surface is created it clears the content of the atlas resource it is targeting.

A custom material is added to the sprite so that it has nearest neighbor filtering for its texture sampler.

The 


--]]


function init(self)
	msg.post(".", "acquire_input_focus")
	
	
	self.timer = 0
	self.counter = 0
	
	self.timer_2 = 0
	
	self.surface = defdraw.create_surface("/surface#sprite", 1024,1024, 960, 640)
	--pprint(self.surface)
	
	
	defdraw.set_color_hex("#ff7800")
end


function update(self, dt)

	--defdraw.cls_hex(self.surface,"#000000",0)

	self.timer_2 = self.timer_2 + 1

	if self.timer_2 > 100 then
		defdraw.cls_hex(self.surface,"#000000",0)
	end

	defdraw.set_color_hex("#ff7800")
	defdraw.draw_point(self.surface,600,600)
	
	
	for i=0,300,1 do
		self.timer = self.timer + 2
		if self.timer >= 400 then
			self.timer = 0
			self.counter = self.counter + 1
		end
		defdraw.color_a = math.min(self.counter / 640, 1)
		defdraw.draw_point(self.surface,self.timer,self.counter)
		--defdraw.draw_point(self.surface,math.floor(self.timer + math.cos(self.counter)),math.floor(self.counter+ math.sin(self.timer)*100))
	end
	

	
	
	--]]
	--print(self.counter)
	--defdraw.draw_point(self.surface,self.timer,630)
	
	
	defdraw.update_resource(self.surface)
end

function on_input(self, action_id, action)
	if action_id == hash("space") and action.released then
		msg.post("@system:", "toggle_profile")
	end
end
